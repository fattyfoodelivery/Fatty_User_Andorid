Index: app/src/main/java/com/joy/fattyfood/ui/views/fragments/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.joy.fattyfood.ui.views.fragments\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.location.Address\r\nimport android.location.Geocoder\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.recyclerview.widget.GridLayoutManager\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.joy.fattyfood.domain.model.*\r\nimport com.google.android.gms.common.ConnectionResult\r\nimport com.google.android.gms.common.GoogleApiAvailability\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.joy.fattyfood.HomeViewModel\r\nimport com.joy.fattyfood.HomeViewState\r\nimport com.joy.fattyfood.R\r\nimport com.joy.fattyfood.adapters.HomeSlideAdapter\r\n//import com.solinx_tech.fattyfood.adapters.AdsSlideAdapter\r\nimport com.joy.fattyfood.adapters.NearByIdRestAdapter\r\nimport com.joy.fattyfood.adapters.RecommendedRestaurantAdapter\r\nimport com.joy.fattyfood.adapters.TopCategoryAdapter\r\nimport com.joy.fattyfood.app.FattyApp\r\nimport com.joy.fattyfood.databinding.FragmentHomeBinding\r\nimport com.joy.fattyfood.databinding.LayoutCurrencyZoneBinding\r\nimport com.joy.fattyfood.domain.model.UpAndDownVO\r\nimport com.joy.fattyfood.ui.views.activities.account_setting.help_center.HelpCenterActivity\r\nimport com.joy.fattyfood.ui.views.activities.auth.login.LoginActivity\r\nimport com.joy.fattyfood.ui.views.activities.base.MainActivity\r\nimport com.joy.fattyfood.ui.views.activities.category.TopRelatedCategoryActivity\r\nimport com.joy.fattyfood.ui.views.activities.parcel.BookingOrderActivity\r\nimport com.joy.fattyfood.ui.views.activities.rest_detail.RestaurantDetailViewActivity\r\nimport com.joy.fattyfood.ui.views.activities.search.SearchActivity\r\nimport com.joy.fattyfood.ui.views.activities.splash.SplashActivity\r\nimport com.joy.fattyfood.ui.views.activities.wish_list.WishListActivity\r\nimport com.joy.fattyfood.ui.views.fragments.address_bottom_sheet.AddressBottomSheetFragment\r\nimport com.joy.fattyfood.ui.views.fragments.address_bottom_sheet.AddressBottomSheetMapboxFragment\r\nimport com.joy.fattyfood.ui.views.fragments.address_bottom_sheet.MapsFragment\r\nimport com.joy.fattyfood.utils.AccountRestrictedDialog\r\nimport com.joy.fattyfood.utils.EqualSpacingItemDecoration\r\nimport com.joy.fattyfood.utils.GpsTracker\r\nimport com.joy.fattyfood.utils.LoadingProgressDialog\r\nimport com.joy.fattyfood.utils.PreferenceUtils\r\nimport com.joy.fattyfood.utils.SuccessDialog\r\nimport com.joy.fattyfood.utils.WarningDialog\r\nimport com.joy.fattyfood.utils.delegate.CallBackMapLatLngListener\r\nimport com.joy.fattyfood.utils.helper.correctLocale\r\nimport com.joy.fattyfood.utils.helper.gone\r\nimport com.joy.fattyfood.utils.helper.show\r\nimport com.joy.fattyfood.utils.helper.showSnackBar\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport java.util.Locale\r\n\r\n@AndroidEntryPoint\r\nclass HomeFragment : Fragment() , CallBackMapLatLngListener {\r\n\r\n\r\n    private var binding: FragmentHomeBinding? = null\r\n    private val viewModel: HomeViewModel by viewModels()\r\n\r\n    private var topCategoryAdapter: TopCategoryAdapter? = null\r\n    private var recommendedRestaurantAdapter: RecommendedRestaurantAdapter? = null\r\n    private var nearByIdRestAdapter: NearByIdRestAdapter? = null\r\n    //private lateinit var adsSlideAdapter: AdsSlideAdapter\r\n    private var addresses: List<Address> = listOf()\r\n    var lastSelected = 0\r\n\r\n    companion object {\r\n        private const val GOOGLE_PLAY_STORE_PACKAGE = \"com.android.vending\"\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = FragmentHomeBinding.inflate(inflater, container, false)\r\n        return (binding?.root)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        PreferenceUtils.isBackground = false\r\n\r\n        setUpRecommendedRestaurants()\r\n        setUpTopFoodCategory()\r\n        setUpNearByRestaurants()\r\n        subscribeUI()\r\n        requireContext().correctLocale()\r\n        navigator()\r\n        navigateToTopRated()\r\n        navigateToParcel()\r\n        onRefreshHome()\r\n\r\n\r\n    }\r\n\r\n    private fun navigateToParcel() {\r\n        binding?.rlTopParcel?.setOnClickListener {\r\n            PreferenceUtils.isBackground = false\r\n            if (PreferenceUtils.readUserVO().customer_id == 0) {\r\n                SuccessDialog.Builder(\r\n                    requireContext(),\r\n                    resources.getString(R.string.login_message),\r\n                    callback = {\r\n                        //requireContext().startActivity<LoginActivity>()\r\n                        val intent = Intent(requireContext(),LoginActivity::class.java)\r\n                        context?.startActivity(intent)\r\n                    })\r\n                    .show(\r\n                        childFragmentManager,\r\n                        HomeFragment::class.simpleName\r\n                    )\r\n            } else if (PreferenceUtils.readUserVO().is_restricted == 1){\r\n                AccountRestrictedDialog.Builder(\r\n                    requireContext(),\r\n                    callback = {\r\n                        //requireActivity().startActivity<HelpCenterActivity>()\r\n                        val intent = Intent(requireContext(),HelpCenterActivity::class.java)\r\n                        context?.startActivity(intent)\r\n                    })\r\n                    .show(\r\n                        childFragmentManager,\r\n                        HomeFragment::class.simpleName\r\n                    )\r\n            } else {\r\n                /*requireActivity().startActivity<BookingOrderActivity>(\r\n                    BookingOrderActivity.IS_EDIT to false\r\n                )*/\r\n                val intent = Intent(requireContext(),BookingOrderActivity::class.java)\r\n                intent.putExtra(BookingOrderActivity.IS_EDIT,false)\r\n                context?.startActivity(intent)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private fun navigateToTopRated() {\r\n        binding?.rlTopRestaurant?.setOnClickListener {\r\n            PreferenceUtils.isBackground = false\r\n            /*requireActivity().startActivity<TopRelatedCategoryActivity>(\r\n                TopRelatedCategoryActivity.CATG to \"Top-Rated\"\r\n            )*/\r\n            val intent = Intent(requireContext(),TopRelatedCategoryActivity::class.java)\r\n            intent.putExtra(TopRelatedCategoryActivity.CATG,\"Top-Rated\")\r\n            context?.startActivity(intent)\r\n        }\r\n    }\r\n\r\n    private fun checkService() {\r\n        val googleAPI = GoogleApiAvailability.getInstance()\r\n        val result = googleAPI.isGooglePlayServicesAvailable(requireContext())\r\n\r\n\r\n        if (result != ConnectionResult.SUCCESS) {\r\n            if (googleAPI.isUserResolvableError(result)) {\r\n                //setUpMapBoxBottomSheet()\r\n                setUpMapBox()\r\n            }\r\n        } else {\r\n            if (result == 0) setUpMapBox() //setUpGoogleMapBottomSheet()\r\n            else setUpMapBox() //setUpMapBoxBottomSheet()\r\n\r\n        }\r\n    }\r\n\r\n    private fun setUpGoogleMapBottomSheet() {\r\n        if (fragmentManager?.findFragmentByTag(\"sheet\") == null) {\r\n            val bottomSheetFragment = AddressBottomSheetFragment.newInstance(onConfirmAddress = {\r\n                binding?.tvUserAddress?.text = convertLatLangToAddress(\r\n                    PreferenceUtils.readUserVO().latitude ?: 0.0,\r\n                    PreferenceUtils.readUserVO().longitude ?: 0.0\r\n                )\r\n                if (PreferenceUtils.readUserVO().customer_id != 0) PreferenceUtils.readUserVO().customer_id?.let { it1 ->\r\n                    viewModel.updateUserInfo(\r\n                        it1,\r\n                        PreferenceUtils.readUserVO().latitude ?: 0.0,\r\n                        PreferenceUtils.readUserVO().longitude ?: 0.0\r\n                    )\r\n                }\r\n                //update\r\n                else PreferenceUtils.readUserVO()?.customer_id?.let { it1 ->\r\n                    viewModel.fetchHome(\r\n                        it1,\r\n                        viewModel.stateName,\r\n                        PreferenceUtils.readUserVO().latitude ?: 0.0,\r\n                        PreferenceUtils.readUserVO().longitude ?: 0.0\r\n                    )\r\n                }\r\n\r\n            })\r\n            requireActivity().supportFragmentManager.let {\r\n                bottomSheetFragment.show(\r\n                    it, \"sheet\"\r\n                )\r\n            }\r\n        } else {\r\n        }\r\n    }\r\n\r\n    private fun setUpMapBoxBottomSheet() {\r\n        if (fragmentManager?.findFragmentByTag(\"sheet\") == null) {\r\n            val bottomSheetFragment =\r\n                AddressBottomSheetMapboxFragment.newInstance(onConfirmAddress = {\r\n                    binding?.tvUserAddress?.text = convertLatLangToAddress(\r\n                        PreferenceUtils.readUserVO().latitude ?: 0.0,\r\n                        PreferenceUtils.readUserVO().longitude ?: 0.0\r\n                    )\r\n                    if (PreferenceUtils.readUserVO().customer_id != 0) PreferenceUtils.readUserVO().customer_id?.let { it1 ->\r\n                        viewModel.updateUserInfo(\r\n                            it1,\r\n                            PreferenceUtils.readUserVO().latitude ?: 0.0,\r\n                            PreferenceUtils.readUserVO().longitude ?: 0.0\r\n                        )\r\n                    }\r\n                    else PreferenceUtils.readUserVO().customer_id?.let { it1 ->\r\n                        viewModel.fetchHome(\r\n                            it1,\r\n                            viewModel.stateName,\r\n                            PreferenceUtils.readUserVO().latitude ?: 0.0,\r\n                            PreferenceUtils.readUserVO().longitude ?: 0.0\r\n                        )\r\n                    }\r\n                })\r\n            requireActivity().supportFragmentManager.let {\r\n                bottomSheetFragment.show(\r\n                    it, \"sheet\"\r\n                )\r\n            }\r\n        } else {\r\n\r\n\r\n        }\r\n    }\r\n\r\n    private fun setUpMapBox() {\r\n        if (fragmentManager?.findFragmentByTag(\"signature\") == null) {\r\n            val fullDialogMap = MapsFragment.newInstance(this)\r\n                /*MapsFragment(cal = {\r\n                    binding?.tvUserAddress?.text = convertLatLangToAddress(\r\n                        PreferenceUtils.readUserVO().latitude ?: 0.0,\r\n                        PreferenceUtils.readUserVO().longitude ?: 0.0\r\n                    )\r\n                    if (PreferenceUtils.readUserVO().customer_id != 0) PreferenceUtils.readUserVO()?.customer_id?.let { it1 ->\r\n                        viewModel.updateUserInfo(\r\n                            it1,\r\n                            PreferenceUtils.readUserVO().latitude ?: 0.0,\r\n                            PreferenceUtils.readUserVO().longitude ?: 0.0\r\n                        )\r\n                    }\r\n                    else PreferenceUtils.readUserVO().customer_id.let { it1 ->\r\n                        viewModel.fetchHome(\r\n                            it1,\r\n                            viewModel.stateName,\r\n                            PreferenceUtils.readUserVO().latitude ?: 0.0,\r\n                            PreferenceUtils.readUserVO().longitude ?: 0.0\r\n                        )\r\n                    }\r\n                })*/\r\n            requireActivity().supportFragmentManager.let {\r\n                fullDialogMap.show(\r\n                    it, \"signature\"\r\n                )\r\n            }\r\n        } else {\r\n        }\r\n    }\r\n\r\n\r\n    private fun checkGPS() {\r\n        var gpsTracker = GpsTracker(requireContext())\r\n        if (!gpsTracker.canGetLocation()) {\r\n            gpsTracker.showSettingsAlert()\r\n        } else {\r\n\r\n            if (gpsTracker.latitude != 0.0 && gpsTracker.longitude != 0.0) {\r\n                if (MainActivity.isFirstTime) {\r\n                    binding?.tvUserAddress?.show()\r\n                    PreferenceUtils.writeUserVO(\r\n                        PreferenceUtils.readUserVO()\r\n                            .copy(latitude = gpsTracker.latitude, longitude = gpsTracker.longitude)\r\n                    )\r\n                    binding?.tvUserAddress?.text = convertLatLangToAddress(\r\n                        PreferenceUtils.readUserVO().latitude?:0.0,\r\n                        PreferenceUtils.readUserVO().longitude?:0.0\r\n                    )\r\n                    shouldUpdateOrFetchHome()\r\n                    MainActivity.isFirstTime = false\r\n                }\r\n\r\n            } else checkService()\r\n        }\r\n    }\r\n\r\n    private fun isPlayStoreInstalled(context: Context): Boolean {\r\n        var result = false\r\n        result = try {\r\n            val packageInfo = context.packageManager.getPackageInfo(GOOGLE_PLAY_STORE_PACKAGE, 0)\r\n            packageInfo.applicationInfo.enabled\r\n        } catch (exc: PackageManager.NameNotFoundException) {\r\n            false\r\n        }\r\n        return result\r\n    }\r\n\r\n    private fun onRefreshHome() {\r\n        binding?.swipeRefresh?.setOnRefreshListener {\r\n            viewModel.isRefresh = true\r\n            shouldUpdateOrFetchHome()\r\n        }\r\n    }\r\n\r\n    private fun navigator() {\r\n        binding?.edtSearch?.setOnClickListener {\r\n            PreferenceUtils.needToShow = false\r\n            PreferenceUtils.isBackground = false\r\n            val intent = Intent(requireContext(),SearchActivity::class.java)\r\n            context?.startActivity(intent)\r\n            //context?.startActivity<SearchActivity>()\r\n        }\r\n        binding?.imvFav?.setOnClickListener {\r\n            PreferenceUtils.needToShow = false\r\n            PreferenceUtils.isBackground = false\r\n            if (PreferenceUtils.readUserVO().customer_id == 0) {\r\n                SuccessDialog.Builder(requireActivity(),\r\n                    resources.getString(R.string.login_message),\r\n                    callback = {\r\n                        //requireActivity().startActivity<LoginActivity>()\r\n                        val intent = Intent(requireContext(),LoginActivity::class.java)\r\n                        context?.startActivity(intent)\r\n                    }).show(\r\n                    requireActivity().supportFragmentManager, HomeFragment::class.simpleName\r\n                )\r\n            } else {\r\n                //context?.startActivity<WishListActivity>()\r\n                val intent = Intent(requireContext(),WishListActivity::class.java)\r\n                context?.startActivity(intent)\r\n            }\r\n        }\r\n\r\n        binding?.tvEdit?.setOnClickListener {\r\n            try {\r\n                checkService()\r\n            } catch (e: Exception) {\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    private fun convertLatLangToAddress(lat: Double, lng: Double): String {\r\n        var address = \"\"\r\n        try {\r\n            val geocoder = Geocoder(requireContext(), Locale.US)\r\n            addresses = geocoder.getFromLocation(lat, lng, 1)!!\r\n            address = addresses[0].getAddressLine(0)\r\n        } catch (e: Exception) { }\r\n        return address\r\n    }\r\n\r\n\r\n    private fun startShimmerEffect() {\r\n        binding?.shimmerView?.show()\r\n        binding?.shimmerView?.startShimmer()\r\n        binding?.rlTopView?.gone()\r\n        //binding?.tvYouMightLike?.gone()\r\n        binding?.tvNearYou?.gone()\r\n\r\n\r\n        if (viewModel.isRefresh) binding?.swipeRefresh?.isRefreshing = true\r\n    }\r\n\r\n    private fun stopShimmerEffect() {\r\n        binding?.shimmerView?.stopShimmer()\r\n        binding?.shimmerView?.gone()\r\n        binding?.rlTopView?.show()\r\n        //binding?.tvYouMightLike?.show()\r\n        binding?.tvNearYou?.show()\r\n        if (viewModel.isRefresh) binding?.swipeRefresh?.isRefreshing = false\r\n    }\r\n\r\n\r\n\r\n    private fun shouldUpdateOrFetchHome() {\r\n        if (PreferenceUtils.readUserVO().customer_id != 0) PreferenceUtils.readUserVO().customer_id?.let {\r\n            viewModel.updateUserInfo(\r\n                it,\r\n                PreferenceUtils.readUserVO().latitude?:0.0,\r\n                PreferenceUtils.readUserVO().longitude?:0.0\r\n            )\r\n        }\r\n        //update\r\n        else PreferenceUtils.readUserVO().customer_id?.let {\r\n            viewModel.fetchHome(\r\n                it,\r\n                viewModel.stateName,\r\n                PreferenceUtils.readUserVO().latitude?:0.0,\r\n                PreferenceUtils.readUserVO().longitude?:0.0\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun subscribeUI() { observers() }\r\n\r\n    @SuppressLint(\"NotifyDataSetChanged\")\r\n    private fun observers() {\r\n        MainActivity.isCurrencyUpdate.observe(viewLifecycleOwner) {\r\n            if (it == true) shouldUpdateOrFetchHome()\r\n            MainActivity.isCurrencyUpdate.postValue(false)\r\n        }\r\n        PreferenceUtils.wishListCount.observe(viewLifecycleOwner) {\r\n            //top_badge.text = \"$it\"\r\n        }\r\n        viewModel.viewState.observe(viewLifecycleOwner) { render(it) }\r\n\r\n    }\r\n\r\n    private fun render(state: HomeViewState) {\r\n        when (state) {\r\n            is HomeViewState.OnLoadingUpdateUserInfo -> {  } //renderOnLoadingUpdateInfo()\r\n            is HomeViewState.OnSuccessUpdateUserInfo -> renderOnSuccessUpdateInfo(state)\r\n            is HomeViewState.OnFailUpdateUserInfo -> renderOnFailUpdateInfo(state)\r\n\r\n            is HomeViewState.OnLoadingHome -> { renderOnLoadingHome() }\r\n            is HomeViewState.OnSuccessHome ->  renderOnSuccessHome(state)\r\n            is HomeViewState.OnFailHome -> renderOnFailHome(state)\r\n\r\n            is HomeViewState.OnLoadingCurrency -> {}//renderOnLoadingCurrency()\r\n            is HomeViewState.OnSuccessCurrency -> renderOnSuccessCurrency(state)\r\n            is HomeViewState.OnFailCurrency -> renderOnFailCurrency(state)\r\n\r\n            is HomeViewState.OnSuccessAdsEngagement -> {}\r\n            is HomeViewState.OnFailAdsEngagement -> {}\r\n\r\n            is HomeViewState.OnLoadingOperateWishList -> renderOnLoadingOperateWishList()\r\n            is HomeViewState.OnSuccessOperateWishList -> renderOnSuccessOperateWishList(state)\r\n            is HomeViewState.OnFailOperateWishList -> renderOnFailOperateWishList(state)\r\n\r\n            else -> {}\r\n        }\r\n    }\r\n\r\n    private fun renderOnLoadingHome() {\r\n        LoadingProgressDialog.showLoadingProgress(requireContext())\r\n    }\r\n\r\n    private fun renderOnLoadingUpdateInfo() {\r\n        LoadingProgressDialog.showLoadingProgress(requireContext())\r\n    }\r\n\r\n    private fun renderOnSuccessUpdateInfo(state: HomeViewState.OnSuccessUpdateUserInfo) {\r\n        LoadingProgressDialog.hideLoadingProgress()\r\n        if (state.data.success) {\r\n            binding?.layoutNetworkError?.root?.gone()\r\n            PreferenceUtils.writeUserVO(state.data.data)\r\n            //update version\r\n            PreferenceUtils.readUserVO().customer_id?.let {\r\n                viewModel.fetchHome(\r\n                    it,\r\n                    viewModel.stateName,\r\n                    PreferenceUtils.readUserVO().latitude?:0.0 ,\r\n                    PreferenceUtils.readUserVO().longitude?:0.0\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun renderOnFailUpdateInfo(state: HomeViewState.OnFailUpdateUserInfo) {\r\n        LoadingProgressDialog.hideLoadingProgress()\r\n        when (state.message) {\r\n            \"Connection Issue\" -> {\r\n                stopShimmerEffect()\r\n                binding?.layoutNetworkError?.root?.show()\r\n            }\r\n            \"Server Issue\" -> {\r\n                stopShimmerEffect()\r\n                binding?.layoutNetworkError?.root?.show()\r\n            }\r\n            \"Another Login\" -> {\r\n\r\n                stopShimmerEffect()\r\n                WarningDialog.Builder(requireContext(),\r\n                    resources.getString(R.string.already_login_title),\r\n                    resources.getString(R.string.already_login_msg),\r\n                    resources.getString(R.string.force_login),\r\n                    callback = {\r\n                        PreferenceUtils.clearCache()\r\n                        requireActivity().finish()\r\n                        val intent = Intent(requireContext(),SplashActivity::class.java)\r\n                        context?.startActivity(intent)\r\n                        //requireContext().startActivity<SplashActivity>()\r\n                    }).show(requireFragmentManager(), HomeFragment::class.simpleName)\r\n            }\r\n            \"Denied\" -> WarningDialog.Builder(requireContext(),\r\n                resources.getString(R.string.maintain_title),\r\n                resources.getString(R.string.maintain_msg),\r\n                \"OK\",\r\n                callback = {\r\n                    requireActivity().finishAffinity()\r\n\r\n                }).show(requireFragmentManager(), HomeFragment::class.simpleName)\r\n\r\n            else -> showSnackBar(state.message)\r\n\r\n        }\r\n    }\r\n\r\n    private fun renderOnSuccessHome(state: HomeViewState.OnSuccessHome) {\r\n        stopShimmerEffect()\r\n        LoadingProgressDialog.hideLoadingProgress()\r\n        val newCategories = state.data.categories.subList(0,8)\r\n        topCategoryAdapter?.setData(newCategories)\r\n\r\n        if (state.data.near_restaurant.isNotEmpty()) {\r\n            binding?.tvNearYou?.show()\r\n            nearByIdRestAdapter?.updateData(state.data.near_restaurant)\r\n        } else binding?.tvNearYou?.gone()\r\n        /*if (state.data.recommend_restaurant.isNotEmpty()) {\r\n            binding?.tvYouMightLike?.show()\r\n            recommendedRestaurantAdapter?.setNewData(state.data.recommend_restaurant)\r\n\r\n        } else binding?.tvYouMightLike?.gone()\r\n\r\n        *//*if (state.data.recommend_restaurant.size > 3) tvRestaurantSeeMore.visibility = View.VISIBLE\r\n        else tvRestaurantSeeMore.visibility = View.GONE*//*\r\n\r\n        if (state.data.near_restaurant.isNotEmpty()) {\r\n            binding?.tvNearYou?.show()\r\n            nearByIdRestAdapter?.updateData(state.data.near_restaurant)\r\n        } else binding?.tvNearYou?.gone()\r\n\r\n        if (state.data.upanddown_ads.isNotEmpty()) {\r\n            //binding?.adsViewContent?.show()\r\n            binding?.coverViewPager?.visibility = View.VISIBLE\r\n            setUpAdsOneSlider(state.data.upanddown_ads)\r\n        } else {\r\n            binding?.coverViewPager?.visibility = View.GONE\r\n            //binding?.adsViewContent?.gone()\r\n        }*/\r\n        //topCategoryAdapter?.setData(newCategories)\r\n\r\n        PreferenceUtils.wishListCount.postValue(state.data.wishlist_count)\r\n        state.data.customer?.let { PreferenceUtils.writeUserVO(it) }\r\n\r\n        viewModel.zoneId = state.data.zone_id!!\r\n        /*if (PreferenceUtils.readParcelZoneId() != state.data.zone_id) {\r\n            PreferenceUtils.writeZoneId(viewModel.zoneId)\r\n            //Clear Cache\r\n            PreferenceUtils.clearCartData()\r\n            //Fetch Currency\r\n            viewModel.fetchCurrency()\r\n        }*/\r\n        if (PreferenceUtils.readZoneId() != state.data.zone_id) {\r\n            stopShimmerEffect()\r\n            PreferenceUtils.writeZoneId(viewModel.zoneId)\r\n            //Clear Cache\r\n            PreferenceUtils.clearCartData()\r\n            //Fetch Currency\r\n            viewModel.fetchCurrency()\r\n        } else {\r\n            stopShimmerEffect()\r\n        }\r\n    }\r\n    private fun renderOnFailHome(state: HomeViewState.OnFailHome) {\r\n        when (state.message) {\r\n            \"Server Error\" -> {\r\n                stopShimmerEffect()\r\n                binding?.layoutNetworkError?.root?.show()\r\n            }\r\n            \"Another Login\" -> {\r\n                stopShimmerEffect()\r\n                WarningDialog.Builder(requireContext(),\r\n                    resources.getString(R.string.already_login_title),\r\n                    resources.getString(R.string.already_login_msg),\r\n                    resources.getString(R.string.force_login),\r\n                    callback = {\r\n                        PreferenceUtils.clearCache()\r\n                        requireActivity().finish()\r\n                        val intent = Intent(requireContext(),SplashActivity::class.java)\r\n                        context?.startActivity(intent)\r\n                        //requireContext().startActivity<SplashActivity>()\r\n                    }).show(requireFragmentManager(), HomeFragment::class.simpleName)\r\n            }\r\n\r\n            \"DENIED\" -> WarningDialog.Builder(requireContext(),\r\n                resources.getString(R.string.maintain_title),\r\n                resources.getString(R.string.maintain_msg),\r\n                \"OK\",\r\n                callback = {\r\n                    requireActivity().finishAffinity()\r\n\r\n                }).show(requireFragmentManager(), HomeFragment::class.simpleName)\r\n\r\n            else ->\r\n            {\r\n                stopShimmerEffect()\r\n                state.message?.let { showSnackBar(it) }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun renderOnLoadingCurrency() {\r\n        LoadingProgressDialog.showLoadingProgress(requireContext())\r\n    }\r\n\r\n    private fun renderOnSuccessCurrency(state: HomeViewState.OnSuccessCurrency) {\r\n        LoadingProgressDialog.hideLoadingProgress()\r\n        if (state.data.data.isNotEmpty()) PreferenceUtils.writeCurrencyVO(state.data.data[0])\r\n        showCurrencyDialog(true, state.data.data)\r\n    }\r\n\r\n    private fun renderOnFailCurrency(state: HomeViewState.OnFailCurrency) {\r\n        LoadingProgressDialog.hideLoadingProgress()\r\n    }\r\n\r\n    private fun renderOnLoadingOperateWishList() {\r\n        LoadingProgressDialog.showLoadingProgress(requireContext())\r\n    }\r\n\r\n\r\n    private fun renderOnSuccessOperateWishList(state: HomeViewState.OnSuccessOperateWishList) {\r\n        LoadingProgressDialog.hideLoadingProgress()\r\n        if (state.data.success) {\r\n            PreferenceUtils.wishListCount.postValue(state.data.data.wishlist_count)\r\n            viewModel.nearRestaurantLiveDataList.value?.forEach { it ->\r\n                if (state.data.data.restaurant_id == it.restaurant_id) {\r\n                    it.is_wish = state.data.message == \"successfull customer wishlist create\"\r\n                    viewModel.nearRestaurantLiveDataList.observe(\r\n                        viewLifecycleOwner\r\n                    ) { nearByIdRestAdapter?.updateData(it) }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun renderOnFailOperateWishList(state: HomeViewState.OnFailOperateWishList) {\r\n        when (state.message) {\r\n            \"Connection Issue\" -> {\r\n                if (viewModel.isRefresh) binding?.swipeRefresh?.isRefreshing = false\r\n                LoadingProgressDialog.hideLoadingProgress()\r\n            }\r\n            \"Server Issue\" -> {\r\n                if (viewModel.isRefresh) binding?.swipeRefresh?.isRefreshing = false\r\n                LoadingProgressDialog.hideLoadingProgress()\r\n            }\r\n            \"Another Login\" -> {\r\n                if (viewModel.isRefresh) binding?.swipeRefresh?.isRefreshing = false\r\n                LoadingProgressDialog.hideLoadingProgress()\r\n                WarningDialog.Builder(requireContext(),\r\n                    resources.getString(R.string.already_login_title),\r\n                    resources.getString(R.string.already_login_msg),\r\n                    resources.getString(R.string.force_login),\r\n                    callback = {\r\n                        PreferenceUtils.clearCache()\r\n                        requireActivity().finish()\r\n                        val intent = Intent(requireContext(),SplashActivity::class.java)\r\n                        requireContext().startActivity(intent)\r\n                    }).show(requireFragmentManager(), HomeFragment::class.simpleName)\r\n            }\r\n\r\n            \"DENIED\" -> WarningDialog.Builder(requireContext(),\r\n                resources.getString(R.string.maintain_title),\r\n                resources.getString(R.string.maintain_msg),\r\n                \"OK\",\r\n                callback = {\r\n                    requireActivity().finishAffinity()\r\n\r\n                }).show(requireFragmentManager(), HomeFragment::class.simpleName)\r\n\r\n            \"Failed\" -> {\r\n                showSnackBar(\"App Error\")\r\n            }\r\n            else -> {\r\n                showSnackBar(state.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setUpAdsOneSlider(data: MutableList<UpAndDownVO>) {\r\n        var homeSlideAdapter : HomeSlideAdapter? = null\r\n        val numberOfScreens = data.size\r\n        homeSlideAdapter = HomeSlideAdapter(requireParentFragment(), numberOfScreens,data){\r\n            //swipePagerWithCoverPopupView()\r\n        }\r\n        binding?.coverViewPager?.adapter = homeSlideAdapter\r\n        binding?.coverViewPager?.isUserInputEnabled = true\r\n    }\r\n\r\n    private fun setUpRecommendedRestaurants() {\r\n        val linearLayoutManager =\r\n            LinearLayoutManager(FattyApp.getInstance(), LinearLayoutManager.HORIZONTAL, false)\r\n        binding?.rvRecommendRestaurant?.layoutManager = linearLayoutManager\r\n        binding?.rvRecommendRestaurant?.addItemDecoration(\r\n            EqualSpacingItemDecoration(\r\n                24,\r\n                EqualSpacingItemDecoration.HORIZONTAL\r\n            )\r\n        )\r\n        binding?.rvRecommendRestaurant?.setHasFixedSize(true)\r\n        binding?.rvRecommendRestaurant?.isNestedScrollingEnabled = true\r\n        recommendedRestaurantAdapter = RecommendedRestaurantAdapter(requireContext()){ data,str,pos ->\r\n            when(str) {\r\n                \"root_content\" -> {\r\n                    PreferenceUtils.needToShow = false\r\n                    PreferenceUtils.isBackground = false\r\n                    /*requireActivity().startActivity<RestaurantDetailViewActivity>(\r\n                        RestaurantDetailViewActivity.RESTAURANT_ID to data.restaurant_id\r\n                    )*/\r\n                    val intent = Intent(requireContext(),RestaurantDetailViewActivity::class.java)\r\n                    intent.putExtra(RestaurantDetailViewActivity.RESTAURANT_ID,data.restaurant_id)\r\n                    context?.startActivity(intent)\r\n                }\r\n\r\n            }\r\n        }\r\n        binding?.rvRecommendRestaurant?.adapter = recommendedRestaurantAdapter\r\n    }\r\n\r\n    private fun setUpNearByRestaurants() {\r\n        val linearLayoutManager =\r\n            LinearLayoutManager(FattyApp.getInstance(), LinearLayoutManager.VERTICAL, false)\r\n        binding?.rvNearRestaurant?.layoutManager = linearLayoutManager\r\n        binding?.rvNearRestaurant?.addItemDecoration(\r\n            EqualSpacingItemDecoration(\r\n                24,\r\n                EqualSpacingItemDecoration.VERTICAL\r\n            )\r\n        )\r\n        binding?.rvNearRestaurant?.setHasFixedSize(true)\r\n        binding?.rvNearRestaurant?.isNestedScrollingEnabled = true\r\n        nearByIdRestAdapter = NearByIdRestAdapter(\r\n            requireContext(),\r\n            mutableListOf()\r\n        ) { data, str, pos ->\r\n            when(str) {\r\n                \"cv_rest\" -> {\r\n                    PreferenceUtils.needToShow = false\r\n                    PreferenceUtils.isBackground = false\r\n                    /*requireActivity().startActivity<RestaurantDetailViewActivity>(\r\n                        RestaurantDetailViewActivity.RESTAURANT_ID to data.restaurant_id\r\n                    )*/\r\n                    val intent = Intent(requireContext(),RestaurantDetailViewActivity::class.java)\r\n                    intent.putExtra(RestaurantDetailViewActivity.RESTAURANT_ID,data.restaurant_id)\r\n                    context?.startActivity(intent)\r\n                }\r\n                \"fav\" -> {\r\n                    if (PreferenceUtils.readUserVO()?.customer_id == 0) {\r\n                        SuccessDialog.Builder(\r\n                            requireContext(),\r\n                            requireContext().resources.getString(R.string.login_message),\r\n                            callback = {\r\n                                PreferenceUtils.needToShow = false\r\n                                PreferenceUtils.isBackground = false\r\n\r\n                                //requireContext().startActivity<LoginActivity>()\r\n                                val intent = Intent(requireContext(),LoginActivity::class.java)\r\n                                context?.startActivity(intent)\r\n                            })\r\n                            .show(childFragmentManager, HomeFragment::class.simpleName)\r\n                    } else {\r\n\r\n                        PreferenceUtils.readUserVO().customer_id?.let {\r\n                            viewModel.operateWishList(it, data.restaurant_id)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        binding?.rvNearRestaurant?.adapter = nearByIdRestAdapter\r\n    }\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        checkGPS()\r\n    }\r\n\r\n\r\n    private fun setupConnectionErrorView(e: String) {\r\n        when (e) {\r\n            \"Connection Issue\" -> {\r\n                binding?.layoutNetworkError?.root?.show()\r\n            }\r\n            \"Server Issue\" -> binding?.layoutNetworkError?.root?.show()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //Show Currency Dialog\r\n    @SuppressLint(\"NotifyDataSetChanged\")\r\n    private fun showCurrencyDialog(isCurrency: Boolean, data: MutableList<CurrencyVO>) {\r\n        val dialogBinding = LayoutCurrencyZoneBinding.inflate(layoutInflater)\r\n        val alertDialog = AlertDialog.Builder(requireContext())\r\n        alertDialog.setView(dialogBinding.root)\r\n        alertDialog.create().apply {\r\n            window?.setBackgroundDrawableResource(android.R.color.transparent)\r\n            setCancelable(false)\r\n            if (isCurrency) {\r\n                dialogBinding.tvTitleCurrency.text = \"Choose Currency\"\r\n\r\n                if (data.size > 1) {\r\n                    dialogBinding.llLashioView.show()\r\n                    dialogBinding.llMuseView.show()\r\n                    dialogBinding.tvNameLashio.text = data[0].currency_symbol\r\n                    dialogBinding.tvNameMuse.text = data[1].currency_symbol\r\n                } else {\r\n                    dialogBinding.llLashioView.show()\r\n                    dialogBinding.llMuseView.gone()\r\n                    dialogBinding.tvNameLashio.text = data[0].currency_symbol\r\n                }\r\n            } else {\r\n                dialogBinding.tvTitleCurrency.text =  \"Choose Region\"\r\n            }\r\n\r\n            if(PreferenceUtils.readZoneId() == 1) {\r\n                dialogBinding.rbtnLashioCheck.isChecked = true\r\n                dialogBinding.rbtnLashioCheck.isChecked = false\r\n            } else {\r\n                dialogBinding.rbtnLashioCheck.isChecked = false\r\n                dialogBinding.rbtnMuseCheck.isChecked = true\r\n            }\r\n\r\n\r\n            dialogBinding.rbtnLashioCheck.isChecked = lastSelected == 1\r\n            dialogBinding.rbtnMuseCheck.isChecked = lastSelected == 2\r\n\r\n            dialogBinding.btnConfirm.setOnClickListener {\r\n                dismiss()\r\n                viewModel.currencyVO = CurrencyVO(\r\n                    currency_id = data[lastSelected].currency_id,\r\n                    currency_name = data[lastSelected].currency_name,\r\n                    currency_symbol = data[lastSelected].currency_symbol,\r\n                    image = data[lastSelected].image,\r\n                    position = lastSelected\r\n                )\r\n            }\r\n            show()\r\n        }\r\n        /*dialogView = layoutInflater.inflate(R.layout.layout_dialog_parcel_state, null)\r\n        val builder = AlertDialog.Builder(requireContext())\r\n        builder.setView(dialogView)\r\n        alertDialog = builder.create().apply {\r\n            if (isCurrency) dialogView?.tvTitle?.text =\r\n                resources.getString(R.string.choose_currency_type)\r\n            else dialogView?.tvTitle?.text = resources.getString(R.string.choose_region)\r\n            window?.setBackgroundDrawableResource(android.R.color.transparent)\r\n            setCancelable(false)\r\n            dialogView?.rvServiceRegion?.bind(\r\n                data, R.layout.layout_item_parcel_state\r\n            ) { state: CurrencyVO, pos: Int ->\r\n                this.radio_parcel_state.text = state.currency_name\r\n\r\n                viewModel.currencyVO = CurrencyVO(\r\n                    currency_id = data[lastSelected].currency_id,\r\n                    currency_name = data[lastSelected].currency_name,\r\n                    currency_symbol = data[lastSelected].currency_symbol,\r\n                    image = data[lastSelected].image,\r\n                    position = lastSelected\r\n                )\r\n\r\n                this.radio_parcel_state.isChecked = lastSelected == pos\r\n\r\n                this.radio_parcel_state.setOnClickListener {\r\n                    lastSelected = pos\r\n                    viewModel.currencyVO = CurrencyVO(\r\n                        currency_id = state.currency_id,\r\n                        currency_name = state.currency_name,\r\n                        currency_symbol = state.currency_symbol,\r\n                        image = state.image,\r\n                        position = lastSelected\r\n                    )\r\n                    dialogView?.rvServiceRegion?.adapter?.notifyDataSetChanged()\r\n                }\r\n            }?.layoutManager(LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false))\r\n            dialogView?.btnConfirm?.setOnClickListener {\r\n                lastSelected = 0\r\n                Preference.writeCurrencyId(viewModel.currencyVO)\r\n                BaseActivity.isCurrencyUpdate.postValue(true)\r\n                dismiss()\r\n            }\r\n            show()\r\n        }*/\r\n    }\r\n\r\n    private fun setUpTopFoodCategory() {\r\n        val linearLayoutManager =\r\n            GridLayoutManager(FattyApp.getInstance(), 4)\r\n        binding?.rvFoodCategory?.layoutManager = linearLayoutManager\r\n        binding?.rvFoodCategory?.addItemDecoration(\r\n            EqualSpacingItemDecoration(\r\n                24,\r\n                EqualSpacingItemDecoration.HORIZONTAL\r\n            )\r\n        )\r\n        binding?.rvFoodCategory?.setHasFixedSize(true)\r\n        binding?.rvFoodCategory?.isNestedScrollingEnabled = true\r\n        topCategoryAdapter = TopCategoryAdapter(mutableListOf())\r\n        binding?.rvFoodCategory?.adapter = topCategoryAdapter\r\n    }\r\n\r\n    override fun onReceiveMapLatLng(latLng: LatLng) {\r\n        binding?.tvUserAddress?.text = convertLatLangToAddress(\r\n            latLng.latitude,latLng.longitude\r\n        )\r\n        if (PreferenceUtils.readUserVO().customer_id != 0) {\r\n            PreferenceUtils.readUserVO().customer_id?.let { viewModel.updateUserInfo(it,latLng.latitude,latLng.longitude) }\r\n        } else {\r\n            PreferenceUtils.readUserVO().customer_id?.let { viewModel.fetchHome(it,\"\",latLng.latitude,latLng.longitude) }\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/joy/fattyfood/ui/views/fragments/HomeFragment.kt b/app/src/main/java/com/joy/fattyfood/ui/views/fragments/HomeFragment.kt
--- a/app/src/main/java/com/joy/fattyfood/ui/views/fragments/HomeFragment.kt	
+++ b/app/src/main/java/com/joy/fattyfood/ui/views/fragments/HomeFragment.kt	
@@ -528,6 +528,13 @@
             binding?.tvNearYou?.show()
             nearByIdRestAdapter?.updateData(state.data.near_restaurant)
         } else binding?.tvNearYou?.gone()
+
+        if (state.data.recommend_restaurant.isNotEmpty()) {
+            binding?.tvYouMightLike?.show()
+            recommendedRestaurantAdapter?.setNewData(state.data.recommend_restaurant)
+
+        } else binding?.tvYouMightLike?.gone()
+
         /*if (state.data.recommend_restaurant.isNotEmpty()) {
             binding?.tvYouMightLike?.show()
             recommendedRestaurantAdapter?.setNewData(state.data.recommend_restaurant)
Index: app/src/main/java/com/joy/fattyfood/di/NetworkModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.joy.fattyfood.di\r\n\r\nimport android.content.Context\r\nimport com.chuckerteam.chucker.api.ChuckerCollector\r\nimport com.chuckerteam.chucker.api.ChuckerInterceptor\r\nimport com.chuckerteam.chucker.api.RetentionManager\r\nimport dagger.Module\r\nimport dagger.Provides\r\nimport dagger.hilt.InstallIn\r\nimport dagger.hilt.android.qualifiers.ApplicationContext\r\nimport dagger.hilt.components.SingletonComponent\r\nimport okhttp3.OkHttpClient\r\nimport retrofit2.Retrofit\r\nimport javax.inject.Named\r\nimport javax.inject.Singleton\r\n\r\n@Module\r\n@InstallIn(SingletonComponent::class)\r\nabstract class NetworkModule {\r\n\r\n    @Module\r\n    @InstallIn(SingletonComponent::class)\r\n    object Provider {\r\n\r\n        @Provides\r\n        @Named(\"MVVMClient\")\r\n        @Singleton\r\n        fun provideMvvmClientRetrofit(@Named(\"ClientOkhttp\") client: OkHttpClient): Retrofit {\r\n            return createRetrofitClient(\r\n                \"https://boadmin.foodelivery.click/\"\r\n                //\"https://boadmin.fattyfooddeli.com/\"\r\n                //\"https://dev.fattyfooddeli.com/\"\r\n               /* if (BuildConfig.DEBUG)\r\n                    \"http://139.59.227.117:8080\"   // Testing\r\n                else\r\n                    \"http://157.245.144.179\"       // Production\r\n*/\r\n                , client)\r\n        }\r\n\r\n        @Provides\r\n        @Named(\"ClientOkhttp\")\r\n        @Singleton\r\n        fun provideClientOkhttpClient(\r\n            @ApplicationContext context: Context,\r\n            chuckerInterceptor: ChuckerInterceptor,\r\n        ): OkHttpClient {\r\n            return createOkHttpClient(context,chuckerInterceptor)\r\n        }\r\n\r\n        @Provides\r\n        @Singleton\r\n        fun provideChuckerInterceptor(@ApplicationContext context: Context): ChuckerInterceptor {\r\n            val chuckerCollector = ChuckerCollector(\r\n                context = context,\r\n                showNotification = true,\r\n                retentionPeriod = RetentionManager.Period.ONE_HOUR\r\n            )\r\n            return ChuckerInterceptor.Builder(context)\r\n                .collector(chuckerCollector)\r\n                .maxContentLength(250_000L)\r\n                .alwaysReadResponseBody(true)\r\n                .build()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/joy/fattyfood/di/NetworkModule.kt b/app/src/main/java/com/joy/fattyfood/di/NetworkModule.kt
--- a/app/src/main/java/com/joy/fattyfood/di/NetworkModule.kt	
+++ b/app/src/main/java/com/joy/fattyfood/di/NetworkModule.kt	
@@ -27,8 +27,8 @@
         @Singleton
         fun provideMvvmClientRetrofit(@Named("ClientOkhttp") client: OkHttpClient): Retrofit {
             return createRetrofitClient(
-                "https://boadmin.foodelivery.click/"
-                //"https://boadmin.fattyfooddeli.com/"
+                //"https://boadmin.foodelivery.click/"
+                "https://boadmin.fattyfooddeli.com/"
                 //"https://dev.fattyfooddeli.com/"
                /* if (BuildConfig.DEBUG)
                     "http://139.59.227.117:8080"   // Testing
